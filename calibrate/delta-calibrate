#!/usr/bin/python3

'''
Delta calibration.

This program will fit the parameters of the printer to a probemap.

Input:
* A probemap
* All parameter values that were used while probing.  Those must be equal for all apexes.

Output:
* New parameter values based on the assumption that the probed surface was flat and horizontal.
'''

import numpy
import scipy.optimize
import fhs
import json
import sys
import math

config = fhs.init({'rodlength': 250, 'radius': 125, 'angle': 0})
limits, nums, probes = json.loads(sys.stdin.read().strip())

a120 = math.radians(120)
a = math.radians(config['angle'])

x, y, w, h = limits
nx, ny, angle = nums
dx = w / nx
dy = h / ny
sina, cosa = math.sin(angle), math.cos(angle)
param = [config['rodlength']] * 3 + [config['radius']] * 3 + [0.] * 3
rod = param[0:3]
radius = param[3:6]
limit = param[6:9]
pos = numpy.array(((radius[0] * math.cos(a), radius[0] * math.sin(a), (rod[0] ** 2 - radius[0] ** 2) ** .5),
	(radius[1] * math.cos(a + a120), radius[1] * math.sin(a + a120), (rod[0] ** 2 - radius[0] ** 2) ** .5),
	(radius[2] * math.cos(a - a120), radius[2] * math.sin(a - a120), (rod[0] ** 2 - radius[0] ** 2) ** .5)))

data = []

for ty in range(ny + 1):
	for tx in range(nx + 1):
		px = x + tx * dx * cosa - ty * dy * sina
		py = y + tx * dx * sina + ty * dy * cosa
		pz = probes[ty][tx]
		p = numpy.array((px, py, pz))
		# Compute motor positions.
		target = []
		for c in range(3):
			v = p - pos[c]
			r2 = v[0] ** 2 + v[1] ** 2
			l2 = rod[c] ** 2
			target.append((l2 - r2) ** .5 + v[2])
		data.append(target)
print(data)

def undelta(param, data):
	rod = param[0:3]
	radius = param[3:6]
	limit = param[6:9]

	# Pos is 3 vectors.
	pos = numpy.array(((radius[0] * math.cos(a), radius[0] * math.sin(a), (rod[0] ** 2 - radius[0] ** 2) ** .5 + data[0] - limit[0]),
		(radius[1] * math.cos(a + a120), radius[1] * math.sin(a + a120), (rod[0] ** 2 - radius[0] ** 2) ** .5 + data[1] - limit[1]),
		(radius[2] * math.cos(a - a120), radius[2] * math.sin(a - a120), (rod[0] ** 2 - radius[0] ** 2) ** .5 + data[2] - limit[2])))

	# x0x1 is a vector.
	x0x1 = pos[1] - pos[0]
	# x1 is a scalar.
	x1 = numpy.inner(x0x1, x0x1) ** .5
	# len01 is a scalar.
	len01 = x1 / 2 + (rod[0] ** 2 - rod[1] ** 2) / (2 * x1)
	# r01_sqared is a scalar
	r01_squared = rod[0] ** 2 - len01 ** 2
	x0x1 /= x1
	# p is a vector.
	p = pos[0] + x0x1 * len01
	# pq is a vector.
	pq = pos[2] - p
	# projected_factor is a scalar.
	projected_factor = numpy.inner(pq, x0x1) / numpy.inner(pq, pq)
	# projected is a vector.
	projected = projected_factor * x0x1
	# rest is a vector.
	rest = pq - projected
	# center is a vector.
	center = p + rest
	# qcenter is a vector.
	qcenter = pos[2] - center
	# r2 is a scalar.
	r2 = math.cos(math.asin(numpy.inner(qcenter, qcenter) ** .5 / rod[2])) * rod[2]
	# x2 is a scalar.
	x2 = numpy.inner(rest, rest) ** .5
	# len012 is a scalar.
	len012 = x2 / 2 + (r01_squared - r2 ** 2) / (2 * x2)
	# r012 is a scalar.
	r012 = (r01_squared - len012 ** 2) ** .5
	# updown is a vector.
	updown = numpy.cross(x0x1, pq)
	# lenud is a scalar.
	lenud = numpy.inner(updown, updown) ** .5
	# xyz is a vector.
	xyz = p + len012 * rest / x2 - r012 * updown / lenud
	return xyz[2]

def error(param):
	return [undelta(param, d) for d in data]

ret = scipy.optimize.leastsq(error, param)

print(ret)
