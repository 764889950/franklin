#!/usr/bin/python
import pygst
pygst.require('0.10')
import gst
import gobject
gobject.threads_init()
import gtk
import glib
import sys

filename = None

def new_pixbuf(bus, message):
	global im, overlay, filename
	if message.type != gst.MESSAGE_ELEMENT:
		return True
	pb = sink.get_property('last-pixbuf')
	if im is None:
		width = pb.get_width()
		height = pb.get_height()
		overlay = gtk.gdk.pixbuf_new_from_file(overlayfile)
		ow = overlay.get_width()
		oh = overlay.get_height()
		overlay.composite(pb, 0, 0, width, height, 0, 0, width * 1.0 / ow, height * 1.0 / oh, gtk.gdk.INTERP_NEAREST, 255)
		window = gtk.Plug(int(sys.argv[1]))
		window.connect('destroy', lambda x: gtk.main_quit())
		im = gtk.image_new_from_pixbuf(pb)
		window.add(im)
		im.show()
		window.show()
	else:
		width = pb.get_width()
		height = pb.get_height()
		ow = overlay.get_width()
		oh = overlay.get_height()
		overlay.composite(pb, 0, 0, width, height, 0, 0, width * 1.0 / ow, height * 1.0 / oh, gtk.gdk.INTERP_NEAREST, 255)
		im.set_from_pixbuf(pb)
	if filename is not None:
		pb.save(filename, 'png')
		filename = None
	return True

def store(source, condition):
	global filename
	if condition != glib.IO_IN:
		gtk.main_quit()
		return False
	filename = sys.stdin.readline()
	return True

overlayfile = '/usr/lib/franklin/overlay.png'
overlay = None
im = None
# Set up gstreamer pipeline.
pipeline = gst.parse_launch('autovideosrc ! video/x-raw-yuv,width=1024,height=768 ! ffmpegcolorspace ! gdkpixbufsink name=sink')
sink = pipeline.get_by_name('sink')
# Register messages for new pixbufs.
bus = pipeline.get_bus()
bus.add_watch(new_pixbuf)
pipeline.set_state(gst.STATE_PLAYING)
# Wait for events on stdin
glib.io_add_watch(0, glib.IO_IN | glib.IO_ERR | glib.IO_HUP | glib.IO_PRI, store)
# Run main loop.
gtk.main()
# Clean up.
pipeline.set_state(gst.STATE_NULL)
