#!/usr/bin/python3
# vim: foldmethod=marker :
# parsebin - Analyse parsed G-Code. {{{
# Copyright 2014-2016 Michigan Technological University
# Copyright 2016 Bas Wijnen <wijnen@debian.org>
# Author: Bas Wijnen <wijnen@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# }}}

import struct
import fhs
import math

scale = 30
offset = 12 * scale

config = fhs.init({'src': None, 'svg': False, 'z': float('nan'), 'offset': 0.0})

file = open(config['src'], 'rb')

cmds = ['system', 'preline', 'line', 'goto', 'gpio', 'set T', 'wait T', 'setpos', 'wait', 'confirm', 'park', 'pattern']
def mkcmd(t):
	if t < len(cmds):
		return cmds[t]
	return '0x%x' % t

n = 0
if config['svg']:
	print('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">')
	print('<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">')
	print('<g fill="none" stroke-width="1">')
else:
	print('type\tcommand\ttool\t      X\t      Y\t      Z\t     Bx\t     By\t     Bz\t      E\t     v0\t     v1\t   time\t   dist\t      r')
pos = (float('nan'), float('nan'), 0.0)
oldx = [0, 0, 0]
while True:
	s = file.read(1 + 4 + 8 * 12)
	if len(s) != 1 + 4 + 8 * 12:
		break
	t, T, X, Y, Z, Bx, By, Bz, E, v0, v1, time, dist, r = struct.unpack('=Bl' + 'd' * 12, s)
	if not math.isnan(config['z']) and Z != config['z']:
		n += 1
		continue
	if not config['svg']:
		if mkcmd(t) == 'pattern':
			if T > 72:
				sys.stderr.write('Warning: invalid pattern record')
			print('%d\tpattern\t%d\t%s' % (n, T, ' '.join('%02x' % x for x in s[5:5 + (T if T <= 72 else 72)])))
		else:
			x = [X, Y, Z]
			dx = sum((new - old) ** 2 if not math.isnan(new - old) else 0 for old, new in zip(oldx, x)) ** .5
			oldx = [old if math.isnan(new) else new for old, new in zip(oldx, x)]
			dt = dx / ((v1 + v0) / 2)
			print(('%d\t%s\t%d' + '\t%7.3f' * 13) % (n, mkcmd(t), T, X, Y, Z, Bx, By, Bz, E, v0, v1, time, dist, r, (v1 - v0) / dt if dt != 0 else float('nan')))
	else:
		Y += Z * config['offset']
		print('<!-- %d -->' % n)
		if t == 2:
			# Line.
			if not math.isnan(pos[0]) and not math.isnan(pos[1]):
				print('<circle cx="%f" cy="%f" r="1" fill="blue"/>' % (pos[0] * scale + offset, offset - pos[1] * scale))
			if not math.isnan(X) and not math.isnan(Y):
				print('<circle cx="%f" cy="%f" r="1" fill="blue"/>' % (X * scale + offset, offset - Y * scale))
			if not math.isnan(pos[0]) and not math.isnan(pos[1]):
				if not math.isnan(E) and not math.isnan(pos[2]) and E != pos[2]:
					style = 'stroke="green"'
				else:
					style = 'stroke="black" stroke-width=".2"'
				if Bx ** 2 + By ** 2 + Bz ** 2 < 1e-10:
					print('<line %s x1="%f" y1="%f" x2="%f" y2="%f"/>' % (style, pos[0] * scale + offset, offset - pos[1] * scale, X * scale + offset, offset - Y * scale))
				else:
					print('<path %s d="M%f %fA%f %f 0 %d %d %f %f"/>' % (style, pos[0] * scale + offset, offset - pos[1] * scale, abs(r) * scale, abs(r) * scale, 0, r > 0, X * scale + offset, offset - Y * scale)) # Determine large arc flag.
					print('<path %s d="M%f %fA%f %f 0 %d %d %f %f"/>' % (style, pos[0] * scale + offset, offset - pos[1] * scale, abs(r) * scale, abs(r) * scale, 0, r <= 0, X * scale + offset, offset - Y * scale)) # Determine large arc flag.
			pos = (X, Y, E)
	n += 1
if config['svg']:
	print('</g>')
	print('</svg>')
