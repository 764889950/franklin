#!/usr/bin/python

import gtk
import interface

class App (gtk.EventBox):
	def home (self):
		self.printer.run_axis (0, 100)
		self.printer.run_axis (1, 100)
		self.printer.run_axis (2, 100)
		while len (self.printer.limits) < 3:
			self.printer.recv_packet (want_any = True)
		self.printer.limits.clear ()
		for i in range (3):
			self.printer.axis[i].set_current_pos (0)
		self.printer.goto (axes = {0:-10,1:-10,2:-10}, cb = True)
		while self.printer.movewait > 0:
			self.printer.recv_packet (want_any = True)
		self.printer.run_axis (0, 10)
		self.printer.run_axis (1, 10)
		self.printer.run_axis (2, 10)
		while len (self.printer.limits) < 3:
			self.printer.recv_packet (want_any = True)
		self.printer.limits.clear ()
		for i in range (3):
			self.printer.axis[i].set_current_pos (0)
	def __init__ (self):
		super (App, self).__init__ ()
		self.printer = interface.Printer ('/dev/ttyUSB0')
		print 'have printer'
		self.home ()
		self.control = False
		self.shift = False
		self.axis = -1
		self.step = None
		self.z = 0.
		self.other = 0.
		self.add_events (gtk.gdk.KEY_PRESS_MASK | gtk.gdk.KEY_RELEASE_MASK)
		self.connect ('key_press_event', self.press)
		self.connect ('key_release_event', self.release)
		self.set_can_focus (True)
		self.label = gtk.Label ('start')
		self.add (self.label)
		self.label.show ()
	def get_amount (self):
		if self.control:
			return .1
		if self.shift:
			return 10
		return 1
	def move (self, dz, dother):
		self.z += dz
		self.other += dother
		axes = {0: self.other, 1: self.other, 2: self.other}
		if self.axis >= 0:
			axes[self.axis] += self.z
		self.printer.goto (axes = axes)
	def press (self, widget, event):
		if event.keyval == gtk.keysyms.Up:
			self.move (0, self.get_amount ())
		elif event.keyval == gtk.keysyms.Down:
			self.move (0, -self.get_amount ())
		elif event.keyval == gtk.keysyms.Left:
			self.move (-self.get_amount (), 0)
		elif event.keyval == gtk.keysyms.Right:
			self.move (self.get_amount (), 0)
		elif event.keyval == gtk.keysyms.Shift_L:
			self.shift = True
		elif event.keyval == gtk.keysyms.Control_L:
			self.control = True
		elif event.keyval == gtk.keysyms.Return:
			if self.step is None:
				self.zero = -self.other
				print 'Printer height: %f' % self.zero
				self.z = 0
				self.other = 0
				for i in range (3):
					self.printer.axis[i].set_current_pos (0)
				self.axis = 0
				self.step = -8
				return
			elif self.step == -8:
				self.z0 = self.z - self.other
				print 'Z0 difference: %f' % self.z0
			else:
				print '%d %d %f' % (self.axis, self.step * 10, self.z - self.z0)
				if self.step == 7:
					self.step = -7
					if self.z > self.other:
						self.move (0, -self.other)
						self.move (-self.z, 0)
					else:
						self.move (-self.z, 0)
						self.move (0, -self.other)
					self.z = 0.
					self.other = 0.
					self.axis += 1
					if self.axis >= 3:
						gtk.main_quit ()
					return
			self.step += 1
	def release (self, widget, event):
		if event.keyval == gtk.keysyms.ISO_Prev_Group:
			self.shift = False
		elif event.keyval == gtk.keysyms.Control_L:
			self.control = False

w = gtk.Window ()
a = App ()
w.add (a)
w.connect ('destroy', lambda x:gtk.main_quit ())
a.show ()
w.show ()
gtk.main ()
for i in range (3):
	a.printer.sleep_axis (i)
