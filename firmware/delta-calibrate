#!/usr/bin/python

import gtk
import serial

class App (gtk.EventBox):
	def __init__ (self):
		super (App, self).__init__ ()
		self.printer = serial.Serial ('/dev/ttyACM0', 115200, timeout = .1)
		self.printer.readall ()
		self.printer.setTimeout (2)
		print 1
		print self.printer.readline ()
		print self.printer.readline ()
		self.printer.setTimeout (.1)
		self.printer.write ('G91\n')
		self.printer.readline ()
		self.printer.write ('G28\n')
		self.printer.readline ()
		self.control = False
		self.shift = False
		self.axis = 'E'
		self.step = 0
		self.x = 0.
		self.z = 0.
		self.add_events (gtk.gdk.KEY_PRESS_MASK | gtk.gdk.KEY_RELEASE_MASK)
		self.connect ('key_press_event', self.press)
		self.connect ('key_release_event', self.release)
		self.set_can_focus (True)
		self.label = gtk.Label ('start')
		self.add (self.label)
		self.label.show ()
	def get_amount (self):
		if self.control:
			return .1
		if self.shift:
			return 10
		return 1
	def send (self, data):
		self.printer.write ('%s\n' % data)
		while True:
			l = self.printer.readline ()
			if l.startswith ('wait'):
				continue
			assert l.startswith ('ok')
			return
	def press (self, widget, event):
		if event.keyval == gtk.keysyms.Up:
			x = self.get_amount ()
			self.send ('G1 X%f Y%f Z%f' % (x, x, x))
			self.z += x
		elif event.keyval == gtk.keysyms.Down:
			x = -self.get_amount ()
			self.send ('G1 X%f Y%f Z%f' % (x, x, x))
			self.z += x
		elif event.keyval == gtk.keysyms.Left:
			x = -self.get_amount ()
			if self.x + x < 0:
				x = -self.x
			self.send ('G1 %s%f' % (self.axis, x))
			self.x += x
		elif event.keyval == gtk.keysyms.Right:
			x = self.get_amount ()
			self.send ('G1 %s%f' % (self.axis, x))
			self.x += x
		elif event.keyval == gtk.keysyms.Shift_L:
			self.shift = True
		elif event.keyval == gtk.keysyms.Control_L:
			self.control = True
		elif event.keyval == gtk.keysyms.Return:
			if self.step == 0:
				self.zero = -self.z
				print 'Printer height: %f' % self.zero
				self.x = 0
				self.z = 0
				self.axis = 'X'
			else:
				print 'Distance %d %s: %f Z: %f' % (self.step, self.axis, self.x, self.z)
				if self.step == 7:
					self.step = 1
					self.send ('G1 X%f Y%f Z%f' % (-self.z, -self.z, -self.z))
					self.send ('G1 %s%f' % (self.axis, -self.x))
					self.x = 0
					self.z = 0
					if self.axis == 'X':
						self.axis = 'Y'
					elif self.axis == 'Y':
						self.axis = 'Z'
					elif self.axis == 'Z':
						gtk.main_quit ()
					return
			self.step += 1
	def release (self, widget, event):
		if event.keyval == gtk.keysyms.ISO_Prev_Group:
			self.shift = False
		elif event.keyval == gtk.keysyms.Control_L:
			self.control = False

w = gtk.Window ()
a = App ()
w.add (a)
w.connect ('destroy', lambda x:gtk.main_quit ())
a.show ()
w.show ()
gtk.main ()
