#! /bin/sh

### BEGIN INIT INFO
# Provides:		printer3d
# Required-Start:	$network $remote_fs
# Required-Stop:	$network $remote_fs
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Server for RepRap 3-D printers
# Description:		Allow browser and python clients to control a 3-D printer
### END INIT INFO

# The defaults below can be overridden in this file.
CONFIG_FILE=/etc/default/printer3d

# Should the server be started?
RUN=1

# Port to listen for browser requests.
HTTP_PORT=8080

# Port to listen for python clients.  The default is to take a random port and publish it using avahi.
PYTHON_PORT='reprap|RepRap printer interface'

# Path to key and certificate to use for encryption.
# This can either be a single file containing the private key and certificate,
# or one file for each of those, separated by a colon.
TLS='/etc/ssl/private/ssl-cert-snakeoil.key:/etc/ssl/certs/ssl-cert-snakeoil.pem'

# Regular expression of printer name to connect to.
PRINTER=''

# Arguments to start-stop-daemon.
ARGS="--make-pidfile --quiet --chuid printer3d:printer3d"

# File for storing the pid.  You probably don't need to change this.
PIDFILE=/run/printer3d.pid

# End of variable list.

if test -r $CONFIG_FILE; then
	. $CONFIG_FILE
fi

NAME=printer3d
DESC="Server for RepRap 3-D printers"
DAEMON=/usr/bin/printer3d-server
ARGS="--pidfile $PIDFILE --exec $DAEMON $ARGS"
START_ARGS="--background --oknodo --start $ARGS -- --httpport=$HTTP_PORT --pythonport='$PYTHON_PORT' --tls=$TLS --printer='$PRINTER'"
STOP_ARGS="--oknodo --stop $ARGS"

if test ! -x "$DAEMON"; then
	echo "$DAEMON does not exist"
	exit 0
fi

. /lib/lsb/init-functions

#
# Start the daemon.
#
do_start()
{
	if [ "$RUN" -eq 0 ]; then
		return 0
	fi
	start-stop-daemon $START_ARGS
	RETVAL="$?"
	if [ "$RETVAL" -eq 0 ]; then
		# It might be that the daemon is not started
		# (see start-stop-daemon --background for explanation)

		# Wait a little bit to allow the daemon to start
		sleep 1
		start-stop-daemon --status $ARGS
		RETVAL="$?"
		case "$RETVAL" in
			0) ;;
			*) RETVAL=1 ;;
		esac
	fi
	return "$RETVAL"
}

#
# Stop the daemon and clean up.
#
do_stop()
{
	start-stop-daemon $STOP_ARGS
	RETVAL="$?"
	[ "$RETVAL" -eq 0 ] && rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		log_end_msg $?
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		log_end_msg $?
		;;
	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		if do_stop; then
			do_start
			log_end_msg $?
		else
			log_end_msg $?
		fi
		;;
	status)
		status_of_proc "$NAME" "$DESC"
		;;
	*)
		log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
		exit 1
		;;
esac

exit 0
